@model IEnumerable<StoreFront.DATA.EF.Models.Product>

@{
    ViewData["Title"] = "Shop Equipment";
}

@*<h1>Index</h1>*@

@*<p>
    <a asp-action="Create">Create New</a>
</p>*@

<section class="product_section layout-padding">
    <div class="container">
        <div class="heading_container heading_center">
            <h2>
                Shop <span>Equipment</span>
            </h2>

<p align="center">
    @if (User.IsInRole("Admin"))
    {
        //The pipe delimiters (|) that were outside of the <a> tags were causing intellisense to
        //assume we were switching BACK to C# mode.
        //To make sure intellisense renders these as text and NOT c#, we can wrap everything in a <span>
        <span>
            <a asp-action="Create">Add New Gadget</a> |
            <a asp-action="Discontinued">Discontinued Gadgets</a> |
        </span>
    }
    <a asp-action="TiledProducts">Tile View</a>
</p>

        </div>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.ProductName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.UnitPrice)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ProductImage)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Category.CategoryName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Status.Discontinued)
            </th>
           @* <th>
                @Html.DisplayNameFor(model => )
            </th>*@
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.ProductName)
            </td>
            @*<td>
                @Html.DisplayFor(modelItem => item.QuantityPerUnit)
            </td>*@
            <td>
                @Html.DisplayFor(modelItem => item.UnitPrice)
            </td>
            <td>
                @*@Html.DisplayFor(modelItem => item.ProductImage)*@
                <img src="~/img/@item.ProductImage" class="img-fluid" alt="@item.ProductName" />
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Category.CategoryName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Status.Discontinued)
            </td>

            <td>
            @if (User.IsInRole("Admin"))
                {
                    <span>
                        <a asp-action="Edit" asp-route-id="@item.ProductId">Edit</a> |
                    </span>
                }
                <a asp-action="Details" asp-route-id="@item.ProductId">Details</a>
            @if (User.IsInRole("Admin"))
                    {
                        @if (item.Status.Discontinued = true)//item.Status.Discontinued retrieves any related records for the Product
                        {
                            <span>|</span>
                            <a asp-action="Delete" asp-route-id="@item.ProductId">Delete</a>
                        }
                        else
                        {
                            <span>|</span>
                            <a disables="disabled" class="text-danger text-decoration-line-through"
                            title="Cannot delete this Gear item as it is referenced by an Order">
                               Delete
                        </a>
                        }
                    }
                
            </td>
        </tr>
}
    </tbody>
</table>

    </div>
</section>

@section Scripts{
    <script>
        $(document).ready(function () {
            $('.table').DataTable();
        });
    </script>
}